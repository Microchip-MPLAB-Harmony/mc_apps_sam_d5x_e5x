var SearchFiles = ["GUID-27131245-2E97-4E1E-A64D-FCD1F88C3926.html",
							"GUID-5B658248-6B24-4D48-AC42-3CBA0265AC10.html",
							"GUID-707108E7-1ED5-4FA4-9DF5-6CFA1FBBB9D6.html",
							"GUID-1A0AF51B-EBBF-44AE-88F5-DA6500E88534.html",
							"GUID-92887F75-C34E-4BA9-A2BA-FDF8C71819FA.html",
							"GUID-BCBC53D3-3ED9-41AA-83F6-CAE4A6A20A5C.html",
							"GUID-283D2AA6-7037-4961-95CC-579E0E4AED67.html",
							"GUID-58732AD5-1F7B-4BF9-BF8D-378E9212B1E8.html",
							"GUID-38AE3206-A3BE-4C3F-BEE1-FF3D4CD29663.html",
							"GUID-12D7F92A-60B4-480D-8039-771DBE66318C.html",
							"GUID-59A326C9-0D84-4128-B726-C09F68546566.html",
							"GUID-F21C756E-F98B-4077-ADF3-063DA37736E2.html",
							"GUID-ADA749A6-70E8-4A1F-8019-5EC170A1250C.html",
							"GUID-FCE068AB-355C-447D-B457-47445AD57EC8.html"];

var SearchTitles = ["Microchip MPLAB® Harmony 3 Motor Control Application Examples for SAM D5x/E5x family",
"Motor Control Applications",
"PMSM FOC Using Hall Sensor",
"PMSM FOC using PLL Estimator",
"PMSM FOC using Quadrature Encoder",
"FOC Based Position Control of PMSM Using Quadrature Encoder",
"Hardware Setup",
"MCHV3 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application'",
"MCHV3 Development Board - Setup and Running 'Position Control of PMSM using Quadrature Encoder Application'",
"MCHV3 Development Board - Setup and Running 'PMSM FOC PLL Application'",
"MCLV2 Development Board - Setup and Running the 'PMSM FOC Quadrature Encoder Application'",
"MCLV2 Development Board - Setup and Running of 'PMSM FOC Hall Sensor Application'",
"MCLV2 Development Board - Setup and Running 'Position Control of PMSM with Quadrature Encoder'",
"MCLV2 Development Board - Setup and Running 'PMSM FOC PLL Application'"];

var SearchInfo = [" Microchip MPLAB® Harmony 3 Motor Control Application Examples for SAM D5x/E5x family MPLAB Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC32 microcontroller and microprocessor devices This repository contains the MPLAB® Harmony 3 Motor Control application exmaples for SAMD5x/E5x family Users can use these examples as a reference for developing their own motor control applications ",
							" Motor Control Applications Configurable Motor Control Examples (Motor Control code-genaration) The following applications are provided to demonstrate the usage of Motor Control Plant to generate motor control application with Microchip's 32-bit MCUs Name Description Control Board Inverter Board PMSM FOC using PLL Estimator Sensorless Field Oriented Control of PMSM using PLL Estimator ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC using Quadrature Encoder Sensored Field Oriented Control of PMSM using Quadrature Encoder ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support Static Motor Control Examples These applications contain static algorithm code and peripherals are configured using MCC Configurations can be changed in userparam h file Name Description Control Board Inverter Board PMSM FOC using PLL Estimator Sensorless Field Oriented Control of PMSM using PLL Estimator ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC using Quadrature Encoder Sensored Field Oriented Control of PMSM using Quadrature Encoder ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC Position Control using Quadrature Encoder Sensored Position Control PMSM using Quadrature Encoder ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC Control using Hall Sensor Sensored field oriented control of PMSM using Hall Sensor ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support PMSM FOC Control with Hall Startup and PLL Sensored field oriented control of PMSM using Hall Sensor ATSAME54 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support ",
							" PMSM FOC Using Hall Sensor This motor control example project shows how to control the Permanent Magnet Synchronous Motor (PMSM) using hall sensor based Field Oriented Control (FOC) on SAME54 Micro-controller Description The permanent magnet synchronous motors ( PMSM ) are widely used in various industries due to its high power density smaller size and high efficiency The Field oriented control is one of the most popular control mechanisms for the PMSM motor for applications which requires high dynamic performance This example shows how to configure motor control peripherals ADC PDEC and TCC for the control operation The control strategy is the sensored FOC in which rotor position is determined by the Hall Sensor Position is obtained using hall sensor and speed is calculated from the position Waveforms and variables can be monitored at runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Torque control loop Field Weakening MHC Project Configurations MHC Project Graph ADC0-ADC1 : ADC0 and ADC1 are setup to operate in Master - Slave mode with ADC0 acting as a Master Both ADCs convert single ended inputs Phase U current is sampled and converted by ADC0 and Phase V current is sampled and converted by ADC1 Both ADCs are hardware triggered simultaneously by an event generated from TCC0 at the end of each PWM cycle Conversion Ready interrupt is generated by ADC0 Since both ADCs are triggered simultaneously and have the same resolution and sampling time both ADCs complete conversion at the same time TCC0 : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously PDEC Peripheral : It is used to decode the rotor position and speed from hall sensor signals PDEC is configured in Hall mode TC2 - TC3 : This peripheral is configured in 32-bit time-stamp capture mode to capture the time between two hall edges Capture happens on PDEC velocity event input EIC : External Interrupt Controller detects a hardware over-current fault input and generates a non-recoverable fault event for TCC0 thereby shutting down the PWM in the event of an over-current fault EVSYS : Event System acts as an intermediary between event generator and event users Event generated by the TCC0 when the counter reaches TOP is used by the ADC0 as a hardware trigger source via the Event System Event generated by the EIC upon over-current fault is used by the TCC0 as a non-recoverable fault event via Event System Event generated by the PDEC when hall input changes is used by the TC2 as a hardware event to capture the counter value via Event System SERCOM2 : SERCOM2 is configured in USART mode and is set to operate at 115200 bps This USART channel is used by the X2CScope plugin to plot or watch global variables in run-time Refer to X2C Scope Plugin section for more details on how to install and use the X2CScope Control Algorithm This section briefly explains the FOC control algorithm software design and implementation Field Oriented Control is the technique used to achieve the decoupled control of torque and flux This is done by transforming the stator current quantities (phase currents) from stationary reference frame to torque and flux producing currents components in rotating reference frame using mathematical transformations The Field Oriented Control is done as follows: Measure the motor phase currents Transform them into the two phase system (a b) using the Clarke transformation Calculate the rotor position angle Transform stator currents into the d q-coordinate system using the Park transformation Speed is controlled by speed PI controllers The stator current torque (iq) and flux (id) producing components are controlled separately by the corresponding PI controllers The output stator voltage space vector is transformed back from the d q-coordinate system into the two phase system fixed with the stator by the Inverse Park transformation Using the space vector modulation the three-phase output voltage is generated Hall Sensor based Position and Speed Measurement : Rotor position and speed are determined using hall sensor Three hall sensors mounted on the motor 120 degress apart PDEC captures the pin status of the three hall sensor inputs and generates interrupt upon change in any of the hall sensor input Hall sensor pattern determines the position of the rotor Hall sensors give position at 60 degree resolution This position is interpolated to get the absolute position required for FOC Speed is calculated by measuring the time between two hall edges by TC peripheral TC captures the counter value on PDEC velocity event The following block diagram shows the software realization of the FOC algorithm block_diagram Software Design In the software the PMSM FOC task is run in ADC interrupt Hall interrupt calculates angle from hall pattern and saves the time between two hall events ** INITIALIZE** In this state following tasks are performed: Initialization and configuration of motor control peripherals for generation of periodic ADC triggers and ADC conversion interrupt Current Offset measurement and calibration Initialize PI controller parameters for speed and current control loops Enables ADC interrupt and Hall interrupt ** START** Control waits for the switch press ** Run** In this state the motor starts spinning in closed loop No field alignment is used for hall based FOC The below flow chart and the timing diagram shows the tasks performed in run state: state_machine hall_isr Hall interrupt has higher priority than ADC interrupt Development Kits MCLV2 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_hall_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mclv2_sam_e54_pim X MPLABX project for MCLV2 board with ATSAME54 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME54 PIM ",
							" PMSM FOC using PLL Estimator This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with PLL Estimator based Field Oriented Control (FOC) on a SAME54 Micro-controller Description Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using PLL estimator technique Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Field weakening MHC Project Configurations MHC Project Graph PMSM_FOC : This component configures FOC algorithm parameters motor parameters and motor control board parameters It connects to underlying peripheral libraries ADC and TCC This component auto configures ADC channels and PWM channels as per PMSM_FOC component configurations ADC0-ADC1 : ADC0 and ADC1 are setup to operate in Master - Slave mode with ADC0 acting as a Master Both ADCs convert single ended inputs Phase U current is sampled and converted by ADC0 and Phase V current is sampled and converted by ADC1 Both ADCs are hardware triggered simultaneously by an event generated from TCC0 at the end of each PWM cycle Conversion Ready interrupt is generated by ADC0 Since both ADCs are triggered simultaneously and have the same resolution and sampling time both ADCs complete conversion at the same time TCC0 : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously EIC : External Interrupt Controller detects a hardware over-current fault input and generates a non-recoverable fault event for TCC0 thereby shutting down the PWM in the event of an over-current fault EVSYS : Event System acts as an intermediary between event generator and event users Event generated by the TCC0 when the counter reaches TOP is used by the ADC0 as a hardware trigger source via the Event System Event generated by the EIC upon over-current fault is used by the TCC0 as a non-recoverable fault event via Event System SERCOM2 : SERCOM2 is configured in USART mode and is set to operate at 115200 bps This USART channel is used by the X2CScope plugin to plot or watch global variables in run-time Refer to X2C Scope Plugin section for more details on how to install and use the X2CScope X2CScope : This component adds X2C scope protocol code This uses UART to communicate to the host PC X2CScope allows user to monitor variables runtime UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Project Details For details refer Motor Control Plant Development Kits MCLV2 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_pll_estimator_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mclv2_sam_e54_pim X MPLABX project for MCLV2 board with ATSAME54 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME54 PIM MCHV3 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_pll_estimator_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mchv3_sam_e54_pim X MPLABX project for MCHV3 board with ATSAME54 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME54 PIM ",
							" PMSM FOC using Quadrature Encoder This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with Quadrature Encoder based Field Oriented Control (FOC) on a SAME54 Micro-controller Description Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using quadrature encoder sensor Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Field weakening MHC Project Configurations MHC Project Graph PMSM_FOC : This component configures FOC algorithm parameters motor parameters and motor control board parameters It connects to underlying peripheral libraries ADC TCC and PDEC This component auto configures ADC channels PWM channels and PDEC peripheral as per PMSM_FOC component configurations ADC0-ADC1 : ADC0 and ADC1 are setup to operate in Master - Slave mode with ADC0 acting as a Master Both ADCs convert single ended inputs Phase U current is sampled and converted by ADC0 and Phase V current is sampled and converted by ADC1 Both ADCs are hardware triggered simultaneously by an event generated from TCC0 at the end of each PWM cycle Conversion Ready interrupt is generated by ADC0 Since both ADCs are triggered simultaneously and have the same resolution and sampling time both ADCs complete conversion at the same time TCC0 : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously PDEC Peripheral : It is used to decode the rotor position and speed from quadrature encoder signals EIC : External Interrupt Controller detects a hardware over-current fault input and generates a non-recoverable fault event for TCC0 thereby shutting down the PWM in the event of an over-current fault EVSYS : Event System acts as an intermediary between event generator and event users Event generated by the TCC0 when the counter reaches TOP is used by the ADC0 as a hardware trigger source via the Event System Event generated by the EIC upon over-current fault is used by the TCC0 as a non-recoverable fault event via Event System SERCOM2 : SERCOM2 is configured in USART mode and is set to operate at 115200 bps This USART channel is used by the X2CScope plugin to plot or watch global variables in run-time Refer to X2C Scope Plugin section for more details on how to install and use the X2CScope X2CScope : This component adds X2C scope protocol code This uses UART to communicate to the host PC X2CScope allows user to monitor variables runtime UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Project Details For details refer Motor Control Plant Development Kits MCLV2 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_encoder_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mclv2_sam_e54_pim X MPLABX project for MCLV2 board with ATSAME54 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME54 PIM MCHV3 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_encoder_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mchv3_sam_e54_pim X MPLABX project for MCHV3 board with ATSAME54 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME54 PIM ",
							" FOC Based Position Control of PMSM Using Quadrature Encoder This motor control example project shows how to control the position of Permanent Magnet Synchronous Motor (PMSM) using an Encoder based Field Oriented Control (FOC) on SAME54 Micro-controller Description The permanent magnet synchronous motors ( PMSM ) is widely used in various industries due to its high power density smaller size and high efficiency The Field oriented control is one of the most popular control mechanisms for the PMSM motor for applications which requires high dynamic performance This example shows how to configure motor control peripherals ADC PDEC and TCC for the control operation The control strategy is the sensored FOC in which rotor position is determined by the Quadrature Encoder Position is obtained using quadrature encoder and speed is calculated from the position Waveforms and variables can be monitored at runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Position control loop MHC Project Configurations MHC Project Graph ADC0-ADC1 : ADC0 and ADC1 are setup to operate in Master - Slave mode with ADC0 acting as a Master Both ADCs convert single ended inputs Phase U current is sampled and converted by ADC0 and Phase V current is sampled and converted by ADC1 Both ADCs are hardware triggered simultaneously by an event generated from TCC0 at the end of each PWM cycle Conversion Ready interrupt is generated by ADC0 Since both ADCs are triggered simultaneously and have the same resolution and sampling time both ADCs complete conversion at the same time TCC0 : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously PDEC Peripheral : It is used to decode the rotor position and speed from quadrature encoder signals EIC : External Interrupt Controller detects a hardware over-current fault input and generates a non-recoverable fault event for TCC0 thereby shutting down the PWM in the event of an over-current fault EVSYS : Event System acts as an intermediary between event generator and event users Event generated by the TCC0 when the counter reaches TOP is used by the ADC0 as a hardware trigger source via the Event System Event generated by the EIC upon over-current fault is used by the TCC0 as a non-recoverable fault event via Event System SERCOM2 : SERCOM2 is configured in USART mode and is set to operate at 115200 bps This USART channel is used by the X2CScope plugin to plot or watch global variables in run-time Refer to X2C Scope Plugin section for more details on how to install and use the X2CScope Control Algorithm This section briefly explains the FOC control algorithm software design and implementation Field Oriented Control is the technique used to achieve the decoupled control of torque and flux This is done by transforming the stator current quantities (phase currents) from stationary reference frame to torque and flux producing currents components in rotating reference frame using mathematical transformations The Field Oriented Control is done as follows: Measure the motor phase currents Transform them into the two phase system (a b) using the Clarke transformation Calculate the rotor position angle Transform stator currents into the d q-coordinate system using the Park transformation Position and speed are controlled by position and speed PI controllers respectively The stator current torque (iq) and flux (id) producing components are controlled separately by the corresponding PI controllers The output stator voltage space vector is transformed back from the d q-coordinate system into the two phase system fixed with the stator by the Inverse Park transformation Using the space vector modulation the three-phase output voltage is generated Quadrature Encoder based Position and Speed Measurement : Rotor position and speed are determined using quadrature encoder sensor PDEC counts the decoded quadrature pulses which is the position of the rotor In this example counter is a free running counter and software logic is implemented to get the exact angular position from the count Speed is calculated by measuring the number of quadrature pulses in a fixed time interval Rotor is first aligned to a known position by exiciting either d-axis or q-axis Motor's position is controlled in a closed loop there after The following block diagram shows the software realization of the FOC algorithm block_diagram Software Design The following figure shows the various state machines of the the motor control software state_machine In the software the PMSM position control task is realized by a state machine as shown in the previous figure The following sections briefly describe the various states in the PMSM position control: INITIALIZE In this state following tasks are performed: Initialization and configuration of motor control peripherals for generation of periodic ADC triggers and ADC conversion interrupt Current Offset measurement and calibration Initialize PI controller parameters for speed and current control loops START In this state the motor control state variables are reset and the periodic ADC conversion interrupt is enabled Control waits for the switch press Run In this state the motor starts spinning The below flow chart and the timing diagram shows the tasks performed in run state: timing_diagram The position control is carried out in the ADC interrupt task Development Kits MCLV2 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_encoder_position_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mclv2_sam_e54_pim X MPLABX project for MCLV2 board with ATSAME54 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME54 PIM MCHV3 with ATSAME54 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_encoder_position_sam_e54  To build the application refer to the following table and open the project using its IDE Project Name Description Demo User Guide mchv3_sam_e54_pim X MPLABX project for MCHV3 board with ATSAME54 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME54 PIM ",
							" Hardware Setup ",
							" MCHV3 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mchv3_sam_e54_pim X MCHV3 Development Board ATSAME54 Plug-in module Leadshine EL5-M0400-1-24 Motor  Isolated Embedded Debugger Interface Setting up MCHV3 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"PFC - External Opamp Configuration\" Matrix board at J4 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Encoder Connections: A+ - HA B+ - HB +5V - +5V GND - G Encoder Connections Jumper Settings: J11 - VAC ( Short Pin 3 - 4) J12 - IA ( Short Pin 1 - 2) J13 - IB ( Short Pin 1 - 2) J14 - Fault_IP/IBUS ( Short Pin 1 - 2) Power the board with (110V/220V) AC mains For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Installing Isolated Embedded Debugger Default programmer or debugger daughter card shipped with the MCHV3 board cannot program or debug SAM series MCU and therefore it needs to be replaced with an Isolated Embedded Debugger Interface for MCHV Isolated EDBG Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch PUSHBUTTON to start the motor Vary potentiometer to change the speed of the motor Press switch to stop the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description PUSHBUTTON To start or stop the motor LED D2 Status Description OFF No fault ON Fault is detected ",
							" MCHV3 Development Board - Setup and Running 'Position Control of PMSM using Quadrature Encoder Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mchv3_sam_e54_pim X MCHV3 Development Board ATSAME54 Plug-in module Leadshine EL5-M0400-1-24 Motor  Isolated Embedded Debugger Interface Setting up MCHV3 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"PFC - External Opamp Configuration\" Matrix board at J4 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Encoder Connections: A+ - HA B+ - HB +5V - +5V GND - G Encoder Connections Jumper Settings: J11 - VAC ( Short Pin 3 - 4) J12 - IA ( Short Pin 1 - 2) J13 - IB ( Short Pin 1 - 2) J14 - Fault_IP/IBUS ( Short Pin 1 - 2) Power the board with (110V/220V) AC mains For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Installing Isolated Embedded Debugger Default programmer or debugger daughter card shipped with the MCHV3 board cannot program or debug SAM series MCU and therefore it needs to be replaced with an Isolated Embedded Debugger Interface for MCHV Isolated EDBG Complete Setup Setup Running the Application Vary the POT (position reference) before PUSHBUTTON press for 'motor start' Press PUSHBUTTON for 'motor start' Observe the position control response Then press PUSHBUTTON for 'motor stop' Vary the POT again for different position reference Press PUSHBUTTON for 'motor start' Observe the position control response Then press PUSHBUTTON for 'motor stop' Continue the steps above for different reference positions Refer to the following tables for switch and LED details: Switch Description PUSHBUTTON To start or stop the motor LED D2 Status Description OFF No fault ON Fault is detected ",
							" MCHV3 Development Board - Setup and Running 'PMSM FOC PLL Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mchv3_sam_e54_pim X MCHV3 Development Board ATSAME54 Plug-in module Leadshine EL5-M0400-1-24 Motor  Isolated Embedded Debugger Interface Setting up MCHV3 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"PFC - External Opamp Configuration\" Matrix board at J4 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Jumper Settings: J11 - VAC ( Short Pin 3 - 4) J12 - IA ( Short Pin 1 - 2) J13 - IB ( Short Pin 1 - 2) J14 - Fault_IP/IBUS ( Short Pin 1 - 2) Power the board with (110V/220V) AC mains For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Installing Isolated Embedded Debugger Default programmer or debugger daughter card shipped with the MCHV3 board cannot program or debug SAM series MCU and therefore it needs to be replaced with an Isolated Embedded Debugger Interface for MCHV Isolated EDBG Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch PUSHBUTTON to start the motor Vary potentiometer to change the speed of the motor Press switch to stop the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description PUSHBUTTON To start or stop the motor LED D2 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running the 'PMSM FOC Quadrature Encoder Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e54_pim X MCLV2 Development Board ATSAME54 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"External Opamp Configuration\" Matrix board at J14 External OPAMP Motor Connections: Phase U - M1 (White coloured wire) Phase V - M2 (Black coloured wire) Phase W - M3 (Red coloured wire) Motor Connections Encoder Connections: Connect encoder wires as shown below 1 : +5V (Red coloured wire) 2 : HA (White coloured wire) 3 : HB (Blue coloured wire) 8 : GND (Black coloured wire) Encoder Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the speed of the motor Press switch S2 to stop the motor Press switch S3 to change the direction of the motor Press switch S2 again to start the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor Switch S3 To change the direction of rotation Direction toggle command is accepted only when motor is stationary LED D2 Status Description OFF Motor spin direction is \"positive\" ON Motor spin direction is \"negative\" LED D17 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running of 'PMSM FOC Hall Sensor Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e54_pim X MCLV2 Development Board ATSAME54 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"External Opamp Configuration\" Matrix board at J14 External OPAMP Motor Connections: Phase U - M1 (White coloured wire) Phase V - M2 (Black coloured wire) Phase W - M3 (Red coloured wire) Motor Connections Hall Sensor Connections: Connect hall sensor wires as shown below 1 : +5V (Red coloured wire) 3 : HA (White coloured wire) 4 : HB (Brown coloured wire) 5 : HC (Green coloured wire) 2 : GND (Black coloured wire) Hall Sensor Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the speed of the motor Press switch S2 to stop the motor Press switch S3 to change the direction of the motor Press switch S2 again to start the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor Switch S3 To change the direction of rotation Direction toggle command is accepted only when motor is stationary LED D2 Status Description OFF Motor spin direction is \"positive\" ON Motor spin direction is \"negative\" LED D17 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running 'Position Control of PMSM with Quadrature Encoder' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e54_pim X MCLV2 Development Board ATSAME54 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"External Opamp Configuration\" Matrix board at J14 External OPAMP Motor Connections: Phase U - M1 (White coloured wire) Phase V - M2 (Black coloured wire) Phase W - M3 (Red coloured wire) Motor Connections Encoder Connections: Connect encoder wires as shown below 1 : +5V (Red coloured wire) 2 : HA (White coloured wire) 3 : HB (Blue coloured wire) 8 : GND (Black coloured wire) Encoder Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the reference rotor position of the motor Observe waveforms on X2CScope scope view Press the Switch S2 to stop the motor Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor LED D17 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running 'PMSM FOC PLL Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e54_pim X MCLV2 Development Board ATSAME54 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME54 Motor Control Plug In Module on U9 header PIM Install Place the \"External Opamp Configuration\" Matrix board at J14 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the speed of the motor Press switch S2 to stop the motor Press switch S3 to change the direction of the motor Press switch S2 again to start the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor Switch S3 To change the direction of rotation Direction toggle command is accepted only when motor is stationary LED D2 Status Description OFF Motor spin direction is \"positive\" ON Motor spin direction is \"negative\" LED D17 Status Description OFF No fault ON Fault is detected "];

